
/// <reference lib="webworker" />
import { precacheAndRoute } from 'workbox-precaching';

declare let self: ServiceWorkerGlobalScope;

// Skip waiting for the service worker to be installed
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache API responses
const apiCacheName = 'api-cache-v1';
const apiCache = ['/api/forms'];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(apiCacheName).then((cache) => {
      return cache.addAll(apiCache);
    })
  );
});

// Fetch event handler
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  
  // Network-first strategy for API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          const responseClone = response.clone();
          caches.open(apiCacheName).then((cache) => {
            cache.put(event.request, responseClone);
          });
          return response;
        })
        .catch(() => {
          return caches.match(event.request);
        })
    );
    return;
  }

  // For other files, use the default strategy from workbox-precaching
});
